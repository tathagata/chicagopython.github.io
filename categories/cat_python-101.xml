<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ChiPy Coding Workshops (Posts about python-101)</title><link>https://chicagopython.github.io/</link><description></description><atom:link href="https://chicagopython.github.io/categories/cat_python-101.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:chicago-sig-organizers@python.org"&gt;Chicago Python User Group&lt;/a&gt; 
&lt;a rel="license" href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;
&lt;img alt="Gnu Public License version 3.0"
style="border-width:0;"
src="https://www.gnu.org/graphics/gplv3-with-text-84x42.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sun, 17 Mar 2019 06:14:41 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Unit Testing and Continuous Integration with Pytest &amp; Travis</title><link>https://chicagopython.github.io/posts/unit-testing-and-continuous-integration-with-pytest-travis/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;h2&gt;1. Introduction to PyTest and Continuous Integration&lt;/h2&gt;
&lt;p&gt;Testing and Continuous Integration is at the heart of building good software.
For this project we will be focus on writing tests for a given problem and use
travis-ci for running the tests automatically everytime code is checked into Github.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt;:
In this project we will explore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to unit testing with pytest&lt;/li&gt;
&lt;li&gt;How to setup continuous integration with Github and Travis-CI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.1. Setup Instructions&lt;/h3&gt;
&lt;p&gt;For doing this project you will need a Github account, a Travis-ci.org account and git
installed locally.&lt;/p&gt;
&lt;h4&gt;1.1.1. Git and Github&lt;/h4&gt;
&lt;p&gt;After completing the steps below you should have a github account and be able to push
your local changes to this repository to github.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the setup steps described &lt;a href="https://help.github.com/articles/set-up-git/"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read the steps described in &lt;a href="https://help.github.com/articles/fork-a-repo"&gt;fork a repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the steps described above to fork this repository &lt;a href="https://github.com/chicagopython/CodingWorkshops"&gt;CodingWorkshops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The changes that you make as a part of this exercise, will be pushed to the fork you created for this
repository.&lt;/p&gt;
&lt;p&gt;In case you have already have created a fork of this repository in your github account, you will
want to bring it up to date with the recent changes. In that case,
you will need to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/"&gt;configuring a remote fork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;syncing a fok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.1.2. Travis setup&lt;/h4&gt;
&lt;p&gt;Continuous Integrration is a critical part of building your software. It automatically runs
the tests when you check in code into your version control (git) and paves the way for
continuous delivery, i.e. release often and release early.
In this section we will set up a Continuous Integration pipeline with Travis-ci.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, head over to &lt;a href="https://travis-ci.org/."&gt;Travis-CI.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sign in with your Github account, and accept the terms and conditions.&lt;/li&gt;
&lt;li&gt;On success, you will be landing on your profile page that lists the CodingWorkshop repository&lt;/li&gt;
&lt;li&gt;Once you have located the repo, toggle the button next to the repository to enable travis CI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="travi-build-img" src="https://chicagopython.github.io/posts/unit-testing-and-continuous-integration-with-pytest-travis/EnableTravisCI.png"&gt;&lt;/p&gt;
&lt;p&gt;If you have multiple repositories, you will have to search for the repository by typing in the name
of the repository (CodingWorkshop) in the search bar on the dashboard page.&lt;/p&gt;
&lt;h3&gt;1.2. Python&lt;/h3&gt;
&lt;p&gt;This project has made no attempt to be compatible with Python 2.7. ðŸ˜Ž&lt;/p&gt;
&lt;p&gt;Recommended version: Python 3.6&lt;/p&gt;
&lt;h3&gt;1.3. Quick Git command refresher&lt;/h3&gt;
&lt;p&gt;Below are the few most used git commands&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git checkout master          # checkout to master branch
git checkout -b feature/cool # crate a new branch feature/cool
git add -u                   # stage all the updates for commit
git commit -am "Adding changes and commiting with a comment"
git push origin master       # push commits to develop/ci branch
&lt;/pre&gt;


&lt;p&gt;Note for this exercise, we will be working on the master branch directly. However,
that is NOT the best practice. Branches are cheap in git, so a new feature or fix
would first go to a branch, get tested, code reviewed and finally merged to master.&lt;/p&gt;
&lt;h3&gt;1.4. Exercise 0: Project Setup&lt;/h3&gt;
&lt;p&gt;After completing the steps in setup, you should have the cloned versoin of the fork of CodingWorkshop
repository in your local machine. Lets take the time to look at the structure of this
project. All code is located under &lt;code&gt;/problems/py101/testing&lt;/code&gt; directory. So from your
terminal go to the directory where you have cloned the repository.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;cd path/to/clone/problems/py101/testing
&lt;/pre&gt;


&lt;p&gt;Make sure you are in this directory for the remainder of this project.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;pwd&lt;/code&gt; (&lt;code&gt;cwd&lt;/code&gt; for Windows) on the command prompt to find out which directory you
are on.&lt;/p&gt;
&lt;p&gt;Your output should end in &lt;code&gt;problems/py101/testing&lt;/code&gt; and contain the files described
below.&lt;/p&gt;
&lt;h4&gt;1.4.1. &lt;code&gt;team_organizer.py&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file is a simplified implementation of the problem of grouping the project
night attendees into teams of four based on the number of lines of code they have
written such that in each team, two team members have more lines of code than the other.
This is the system under test.&lt;/p&gt;
&lt;h4&gt;1.4.2. &lt;code&gt;test_team_organizer.py&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file is the test for the above module written using Pytest.&lt;/p&gt;
&lt;p&gt;These two files mentioned above are the only two files that we will be making
modifications to for this project.&lt;/p&gt;
&lt;h4&gt;1.4.3. &lt;code&gt;Makefile&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file contains the commands that are required building the project.
You can run &lt;code&gt;make help&lt;/code&gt; to see what are the options.&lt;/p&gt;
&lt;h4&gt;1.4.4. &lt;code&gt;Pipfile&lt;/code&gt; and &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;These two files are used by &lt;code&gt;pipenv&lt;/code&gt; to create a virtual enviornment that
isolates all the dependencies of this project from other python projects in your computer.
Learn more about &lt;a href="https://docs.pipenv.org/"&gt;pipenv&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;1.4.5. &lt;code&gt;pytest.ini&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file contains the configuration for &lt;code&gt;pytest&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;1.4.6. &lt;code&gt;travis.yml&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;In addition to all the files in this directory, located at the root of the repository,
is a file called &lt;code&gt;.travis.yml&lt;/code&gt;. This is used by the continuous intergration tool travis-ci.
This contains the information on how to build this python project.&lt;/p&gt;
&lt;h4&gt;1.4.7. Test your setup is working&lt;/h4&gt;
&lt;p&gt;Just make a small edit on this file (README.md), commit and push the changes.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git commit -am "Demo commit to check everything is working"
git push origin master
&lt;/pre&gt;


&lt;p&gt;If travis-ci.org gets triggered and is all green, your push has successfully ran through
the linting and testing pipeline.&lt;/p&gt;
&lt;p&gt;To display that badge of honor, click on the build button next on the travis page and select
Markdown from the second dropdown. Copy the markdown code displayed and add it to the top
of this file (README.md).&lt;/p&gt;
&lt;p&gt;&lt;img alt="travi-build-img" src="https://chicagopython.github.io/posts/unit-testing-and-continuous-integration-with-pytest-travis/travis-build-img.png"&gt;&lt;/p&gt;
&lt;p&gt;If you run into issues, &lt;a href="https://chipy.slack.com/messages/C093F7W8P/details/"&gt;ask your question on slack&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;1.5. Exercise 1: Build&lt;/h3&gt;
&lt;p&gt;From the &lt;code&gt;/problems/py101/testing&lt;/code&gt; directory, run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;make
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Which packages got installed?&lt;/li&gt;
&lt;li&gt;Which version of python is getting used?&lt;/li&gt;
&lt;li&gt;How many tests pass, skipped and how long did it take?&lt;/li&gt;
&lt;li&gt;Note a new directory &lt;code&gt;htmlcov&lt;/code&gt; was created. We will revisit this in Exericse 5.&lt;/li&gt;
&lt;li&gt;What is difference in output when you run the &lt;code&gt;make&lt;/code&gt; command again?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.6. Exercise 2: Run the program&lt;/h3&gt;
&lt;p&gt;Start by running&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;python team_organizer.py
&lt;/pre&gt;


&lt;p&gt;This will drop you to the program's interactive prompt.
Below is a sample interaction where users named a, b, c,
d, e and f are added using the add command.
Following that, we run the &lt;code&gt;print&lt;/code&gt; command where the users
are grouped in to max of size four where two users have
written less lines of code than the others.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;```
t (master *) testing $ python team_organizer.py
Welcome to Chicago Python Project Night Team Organizer
org&amp;gt; help
help

Documented commands (type help &amp;lt;topic&amp;gt;):
========================================
add  help  print

Undocumented commands:
======================
exit

org&amp;gt; help add
help add
Adds a new user. Needs Name slackhandle number_of_lines separated by space
org&amp;gt; add a @a 100
add a @a 100
org&amp;gt; add b @b 200
add b @b 200
org&amp;gt; add c @c 300
add c @c 300
org&amp;gt; add d @d 400
add d @d 400
org&amp;gt; add e @e 500
add e @e 500
org&amp;gt; add f @f 50
add f @f 50
org&amp;gt; print
print
['f, a, e, d']
b, c
org&amp;gt;
```
&lt;/pre&gt;


&lt;h3&gt;1.7. Exercise 3: Running the tests&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;make test
&lt;/pre&gt;


&lt;p&gt;This will run the tests in the &lt;code&gt;test_team_organizer.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;pipenv run pytest --help
&lt;/pre&gt;


&lt;p&gt;Now check the flags that are present in the &lt;code&gt;pytest.ini&lt;/code&gt; file against
the output of the &lt;code&gt;--help&lt;/code&gt; command to see what each one does.&lt;/p&gt;
&lt;h3&gt;1.8. Execrise 4: Coverage&lt;/h3&gt;
&lt;p&gt;When we first ran &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;pytest&lt;/code&gt; created a directory called &lt;code&gt;htmlcov&lt;/code&gt;
that show you the coverage information about &lt;code&gt;team_organizr,py&lt;/code&gt; code.
Open the &lt;code&gt;index.html&lt;/code&gt; file inside &lt;code&gt;htmlcov&lt;/code&gt; to check the lines that
has not been covered by the tests in the &lt;code&gt;test_team_organizer.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What is the % coverage of the code at this point?
Click on &lt;code&gt;team_organizer.py&lt;/code&gt; to see which lines are outside coverage.&lt;/p&gt;
&lt;h3&gt;1.9. Exercise 6: Fail, Fix, Pass&lt;/h3&gt;
&lt;p&gt;You are now all set to fix the tests. Goto &lt;code&gt;test_team_organizer.py&lt;/code&gt; and
find &lt;code&gt;test_add_a_person_with_lower_than_median&lt;/code&gt; test. Notice this test is
skipped when run with pytest. To fix it remove the decorator &lt;code&gt;pytest.mark.skip&lt;/code&gt;
and run &lt;code&gt;pytest&lt;/code&gt; again. Commit the code and run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;make test
&lt;/pre&gt;


&lt;p&gt;Make the necessary changes so that the test passes.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git commit -am "Fixed failing test"
git push origin master
&lt;/pre&gt;


&lt;p&gt;Go to travis-ci.org and inspect the output before and after fixing the test.
What is the coverage value at this point?&lt;/p&gt;
&lt;h3&gt;1.10. Exercise 7: Fixtures&lt;/h3&gt;
&lt;p&gt;The purpose of test fixtures is to provide a fixed baseline upon which tests can
reliably and repeatedly execute.&lt;/p&gt;
&lt;p&gt;We are making use of two fixtures - one factory method &lt;code&gt;person&lt;/code&gt; that churns out Persons
as needed by &lt;code&gt;organizer&lt;/code&gt; fixture.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test_count_number_of_teams&lt;/code&gt; is broken as well. How can you fix it?&lt;/p&gt;
&lt;p&gt;Tip: To run a singe test, use&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;pipenv run pytest -k &amp;lt;name-of-test&amp;gt;
&lt;/pre&gt;


&lt;h3&gt;1.11. Exercise 8: Implement the tests&lt;/h3&gt;
&lt;p&gt;The two functions below have been left for you to implement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test_add_a_person_who_has_never_written_code_before&lt;/li&gt;
&lt;li&gt;test_add_two_person_with_same_name_but_different_slack_handles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the names of the tests are long and verbose to give you an idea of what
what exactly you need to test.&lt;/p&gt;
&lt;p&gt;Does implementing these tests have any effect on coverage results?
Would it be still useful if there is no improvement in coverage?&lt;/p&gt;
&lt;h3&gt;1.12. Exercise 9: Implement the tests first, then implement the feature&lt;/h3&gt;
&lt;p&gt;For the following two tests, first implement the test that asserts the
expected behavior. From the test name it should be evident from the test name.
If you run the tests at this point, they should fail. Then go back to
&lt;code&gt;team_organizer.py&lt;/code&gt; and implement the feature by changing the code.
Once your implementation is complete, run &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test_adding_person_with_negative_lines_of_code_throws_exception&lt;/li&gt;
&lt;li&gt;test_handle_duplicate_additions&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>ci/cd</category><category>pytest</category><category>testing</category><guid>https://chicagopython.github.io/posts/unit-testing-and-continuous-integration-with-pytest-travis/</guid><pubDate>Sun, 17 Mar 2019 06:08:40 GMT</pubDate></item><item><title>Command line App for Grouping Project Night Challengers</title><link>https://chicagopython.github.io/posts/command-line-app-for-grouping-project-night-challengers/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;h2&gt;Command line App for Grouping Project Night Challengers&lt;/h2&gt;
&lt;p&gt;The organizers of Project Nights need your help! Grouping people for
team projects is a manual task. Why do it manually, when
we can automate it?&lt;/p&gt;
&lt;h3&gt;Is this project for you&lt;/h3&gt;
&lt;p&gt;Before you progress further, let's check if we are ready to solve this. You should&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a personal computer with working wifi and power chord&lt;/li&gt;
&lt;li&gt;Have Python 3 installed on your computer. Yep, Python 3 only.&lt;/li&gt;
&lt;li&gt;Have &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; or &lt;a href="https://www.sublimetext.com/3"&gt;Sublime Text&lt;/a&gt; installed in your computer.&lt;/li&gt;
&lt;li&gt;Have written &amp;amp; ran programs in Python from the command line&lt;/li&gt;
&lt;li&gt;Have some idea about lists, dictionaries and functions&lt;/li&gt;
&lt;li&gt;Have some idea about &lt;code&gt;virtualenv&lt;/code&gt; and installing packages with &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This project is not tested using Jupyter Notebook, PyCharm,
Spider, or any other ide/text editor/programming environment for that matter.
Atom or Sublime Text and the command line are the only supported development environment for this project.&lt;/p&gt;
&lt;p&gt;Short url for this page: &lt;strong&gt;https://git.io/vdv43&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sounds reasonable? Then let's dive in - and build an awesome command line app using python.&lt;/p&gt;
&lt;h3&gt;Can command line applications be cool&lt;/h3&gt;
&lt;p&gt;You bet!
Checkout this PyCon 2017 video on which this project is based&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=hJhZhLg3obk" target="_blank"&gt;&lt;img src="http://img.youtube.com/vi/hJhZhLg3obk/0.jpg" alt="Amjith Ramanujam Awesome Command Line Tools PyCon 2017" width="560" height="315" border="10"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The slides are available &lt;a href="https://speakerdeck.com/pycon2017/amjith-ramanujam-awesome-command-line-tools"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;What is a Team Project&lt;/h4&gt;
&lt;p&gt;Glad you asked! A team project is an hour long problem solving session where each team
consists of four members of different expertise level. The teams are formed from the
list of attendees of the project night.&lt;/p&gt;
&lt;h4&gt;The Objective&lt;/h4&gt;
&lt;p&gt;Our objective is to build an awesome command line application in Python3 that
- allows creating list of people who want to participate in a team project
- once the list is created, the program automatically creates teams of four&lt;/p&gt;
&lt;h4&gt;A Balanced Team&lt;/h4&gt;
&lt;p&gt;To keep the team composition balanced in terms of experience, we want every team
to have two members with more experience than the other two.
Measuring experience is very subjective and difficult, but we will keep it simple.
We will rely on a (not very scientific) metic - lines of code written till date.&lt;/p&gt;
&lt;p&gt;We will create a list by taking names of people from tonight's RSVP list. Along with their name we will also include the number of lines of code that person has written till date in Python or an equivalent language. Imagine this as a tool that one of the organizers uses to checkin attendees as they start coming in on the day of Project Night.&lt;/p&gt;
&lt;p&gt;And yeah, this number of lines can be just a rough estimate. As a
reference, the linux kernel is over 23 million lines of code!&lt;/p&gt;
&lt;h4&gt;Bootstrap&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are familiar with &lt;code&gt;git&lt;/code&gt;, run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/chicagopython/CodingWorkshops.git
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not, go to https://github.com/chicagopython/CodingWorkshops&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Click on the Download Zip and unzip the file that gets downloaded&lt;/li&gt;
&lt;li&gt;From your command line, change directory to the path where you have downloaded it.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On linux or OS X&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cd path/to/CodingWorkshops/problems/py101/python_team_project/
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Windows&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cd path\to\CodingWorkshops\problems\py101\python_team_project
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here you will find the basic skeleton of the app under &lt;code&gt;app.py&lt;/code&gt;. (after September 21, 2017)&lt;/p&gt;
&lt;h4&gt;Set up virtualenv&lt;/h4&gt;
&lt;p&gt;If you are using Linux or OS X, run the following to create a new virtualenv&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
python app.py
&lt;/pre&gt;


&lt;p&gt;On Windows, run the following&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv venv
venv\Scripts\activate
pip install -r requirements.txt
python app.py
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://asciinema.org/a/M1hP91h153PuOPEjVYbot6jPj"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/M1hP91h153PuOPEjVYbot6jPj.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next let's get started by looking into the code.&lt;/p&gt;
&lt;h3&gt;Feature 0: Look into app.py&lt;/h3&gt;
&lt;p&gt;app.py is the script contains some code to get you started.
We will be using two external libraries for this
program.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;python_prompt_toolkit
meetup-api
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prompt_toolkit&lt;/code&gt; makes it easy for building awesome command line apps&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meetup-api&lt;/code&gt; provides us with the data for the meetup&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asciinema&lt;/code&gt; which is also in the &lt;code&gt;requirements.txt&lt;/code&gt; isn't strictly necessary and we'll talk about it last&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;execute&lt;/code&gt; function is where you would be writing your application logic.&lt;/p&gt;
&lt;p&gt;You should not require to make changes to &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;get_names&lt;/code&gt; functions. In an upcoming project nights we will dig into &lt;code&gt;get_names&lt;/code&gt; and make changes to it.&lt;/p&gt;
&lt;p&gt;Next let's run app.py&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;   python3 app.py
&lt;/pre&gt;


&lt;p&gt;This should drop you to a prompt.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;


&lt;p&gt;Type in something to that prompt.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Hola amigo
&amp;gt; You issued: Hola amigo
&lt;/pre&gt;


&lt;p&gt;Try a few more&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Gracias
&amp;gt; You issued:Gracias
&lt;/pre&gt;


&lt;p&gt;You can now press the up arrow key and access the history of the commands you have issued. To exit out of the program, you can type Ctrl-D.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;


&lt;p&gt;GoodBye!&lt;/p&gt;
&lt;h4&gt;Feature 1: Implement the Add command&lt;/h4&gt;
&lt;p&gt;Next let's create a command where the user of the program can register new participants to build up the list of users from whom teams will be formed.&lt;/p&gt;
&lt;p&gt;The command should look like the following&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;add &amp;lt;name&amp;gt; &amp;lt;number of lines&amp;gt;
&lt;/pre&gt;


&lt;p&gt;where &lt;name&gt; is the full name of the person as it appears in the
meetup.com and &lt;lines&gt; is the  number of lines of code
that person has written in Python or a similar programming language in their life.&lt;/lines&gt;&lt;/name&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;add Tathagata Dasgupta 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Feature 2: Add some error checking (optional)&lt;/h4&gt;
&lt;p&gt;You might be asking what if the user incorrectly types something that is not a number
for the &lt;code&gt;number of lines&lt;/code&gt;. Indeed that would be incorrect. Show an error message
if &lt;number of lines&gt; is not a number.&lt;/number&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt; add Tathagata Dasgupta o
    ERROR: number of lines should be, er, a "number"
&lt;/pre&gt;


&lt;p&gt;Are there other error conditions that can arise?&lt;/p&gt;
&lt;h3&gt;Feature 2: Implement a List command&lt;/h3&gt;
&lt;p&gt;Next add a new command list.
Show the number of people added and prints the total count
and the median of the line count.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt; add Tathagata Dasgupta 1
    &amp;gt; add Jason Wirth 2
    &amp;gt; add Adam Bain 3
    &amp;gt; add Brian Ray 4
    &amp;gt; add Guido van Rossum 5
    &amp;gt; list
    &amp;gt; People added so far:
    Tathagata Dasgupta, 1
    Jason Wirth, 2
    Adam Bain, 3
    Brian Ray, 4
    Guido Van Rossum, 5

    Number of people: 5
    Median line count: 3
&lt;/pre&gt;


&lt;p&gt;Your output need not be exactly the same, but should show the
correct data. The Median line count will be used in the next
features.
Hint: Python3 has the statistics module, so you can use&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statistics&lt;/span&gt;
&lt;span class="n"&gt;statistics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Feature 3: Add the teams command (optional)&lt;/h3&gt;
&lt;p&gt;The next command we will implement is &lt;code&gt;teams&lt;/code&gt; command. Let's say you
have added a few people already and know what the median line count
is for the people you have added so far. On issuing the &lt;code&gt;teams&lt;/code&gt; command
it should output teams of four such that each team contains
  - 2 person who have written less than the median lines of code
  - 2 person who has written more than written more than median&lt;/p&gt;
&lt;p&gt;If there are less the four people left to group, then group them
together.&lt;/p&gt;
&lt;p&gt;With our running example, there would be a team of four, and the
remaining 1 should be in another group.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt; teams
    Group 1: Tathagata Dasgupta, Jason Wirth, Brian Ray, Guido Van Rossum
    Group 2: Adam Bain
&lt;/pre&gt;


&lt;h3&gt;Feature 4. Enhance Team command (optional)&lt;/h3&gt;
&lt;p&gt;Add a unique team name&lt;/p&gt;
&lt;h3&gt;Feature 5. Enhance Team command (optional)&lt;/h3&gt;
&lt;p&gt;Make up random room names and add a room name for each team.&lt;/p&gt;
&lt;h3&gt;Feature 6. Enhance Teams command (optional)&lt;/h3&gt;
&lt;p&gt;Print the teams sorted with the average number of lines of code for each team.&lt;/p&gt;
&lt;h3&gt;Feature 7. Auto-completion for commands (optional)&lt;/h3&gt;
&lt;p&gt;Adding auto completion is easy with &lt;code&gt;prompt_toolkit&lt;/code&gt;. In &lt;code&gt;app.py&lt;/code&gt; the following line is used to include the
&lt;code&gt;add&lt;/code&gt; command to auto-completion.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    command_completer = WordCompleter(['add'], ignore_case=True)
&lt;/pre&gt;


&lt;p&gt;Add the remaining commands.&lt;/p&gt;
&lt;h3&gt;Feature 8. Auto-completion for participant names (optional)&lt;/h3&gt;
&lt;p&gt;Typing in names of the attendees of project night would be time consuming
and error prone. Let's add auto-completion magic to it!&lt;/p&gt;
&lt;p&gt;The funcion &lt;code&gt;get_names&lt;/code&gt; uses meetup-api and returns a list of names for the attendees.
All you need to do is include a call to &lt;code&gt;get_names&lt;/code&gt; in the command_completer.&lt;/p&gt;
&lt;h3&gt;Feature 9. Tell the world (optional, OS X or Linux only)&lt;/h3&gt;
&lt;p&gt;We have also installed asciinema - a tool that allows you
to create recordings of your terminal sessions. In order to tell
the world what your team has made, let's make a small recording.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; ascriinmea rec teamname.json
&lt;/pre&gt;


&lt;p&gt;Run your program and show off all the cool features you have built in your app.
To finish recording hit Ctrl-D.
Next play the recordings&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; asciinema play teamname.json
&lt;/pre&gt;


&lt;p&gt;Once the playback looks good, upload it to the interwebs.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; asciinema upload teamname.json
&lt;/pre&gt;


&lt;p&gt;Finally, tweet the link to @chicagopython with "Python Project Night
Mentorship". Include the twitter handles of your team members.&lt;/p&gt;
&lt;p&gt;Note: This is tested only in OS X. Let me know your experience for running it on
other operating systems.
If you see an error&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    asciinema needs a UTF-8 native locale to run. Check the output of `locale` command.
&lt;/pre&gt;


&lt;p&gt;the run the following command before running asciinema.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    export LC_ALL=en_US.UTF-8
&lt;/pre&gt;


&lt;p&gt;Thanks! Thats all folks!
If you found a bug or think you some instructions are missing - just open a issue in this repository.&lt;/p&gt;&lt;/div&gt;</description><category>cli</category><category>python-101</category><guid>https://chicagopython.github.io/posts/command-line-app-for-grouping-project-night-challengers/</guid><pubDate>Sun, 17 Mar 2019 04:59:16 GMT</pubDate></item><item><title>Python Koans</title><link>https://chicagopython.github.io/posts/python-koans/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;p&gt;For this exercise we will learn the Zen of Python using Test Driven Development.
Python Koans is a suite of broken tests, which are written against Python code that demonstrate how to Pythonic code.
Your job is to fix the broken tests by filling in the missing parts of the code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the zip of python_koans from &lt;a href="https://github.com/tathagata/python_koans/archive/chipy_mentorship_coding_dojo.zip"&gt;here&lt;/a&gt;. This is a fork of the original repository without some of the simpler examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip the archive. Change into the directory created and then depending on which version of Python you
would be using, change into python2 or python3 directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;./run.sh&lt;/code&gt; or &lt;code&gt;./run.bat&lt;/code&gt; depending on if you are in a unix or windows environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll see an output like&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thinking AboutLists
  test_creating_lists has damaged your karma.&lt;/p&gt;
&lt;p&gt;You have not yet reached enlightenment ...
  AssertionError: '-=&amp;gt; FILL ME IN! &amp;lt;=-' != 0&lt;/p&gt;
&lt;p&gt;Please meditate on the following code:
 File "/Users/t/Downloads/python_koans-chipy_mentorship_coding_dojo_2/python3/koans/about_lists.py", line 14, in test_creating_lists
    self.assertEqual(__, len(empty_list))&lt;/p&gt;
&lt;p&gt;You have completed 0 koans and 1 lessons.
You are now 206 koans and 36 lessons away from reaching enlightenment.&lt;/p&gt;
&lt;p&gt;Beautiful is better than ugly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open the file that follows "Please meditate on the following code" in your text editor and put the appropriate fix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;./run.sh&lt;/code&gt; or &lt;code&gt;./run.bat&lt;/code&gt; depending on if you are in a unix or windows environment. If your fix is correct, you'll see the error message has been replaced with a new one. Great! you have fixed one test, so now move on to the next one by repeating the above steps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>testing</category><guid>https://chicagopython.github.io/posts/python-koans/</guid><pubDate>Sat, 22 Jul 2017 11:00:00 GMT</pubDate></item></channel></rss>